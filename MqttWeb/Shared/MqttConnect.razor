@inject MqttState MqttState
@inject MqttService MqttService
@inject MqttConfigurationRepository ConfigurationRepository
@using System.Linq.Expressions
@using MqttWeb.Data

<h3>Connect</h3>
<div class="form">
    @if (configurations != null)
    {
        <label />
        <select @onchange="ConfigurationChanged" class="form-control">
            @foreach (var conf in configurations)
            {
                <option value="@conf.Id">@conf.Name</option>
            }
        </select>
    }
    @if (MqttState.IsConnected)
    {
        <label></label><button class="btn btn-primary" @onclick="Disconnect">Disconnect</button>
    }
    else
    {
        <label></label><button class="btn btn-primary" @onclick="Connect">Connect</button>
    }
</div>

@functions {
    IEnumerable<MqttConfiguration> configurations;
    MqttConfiguration _selectedConfiguration;
    MqttConfiguration selectedConfiguration
    {
        get { return _selectedConfiguration; }
        set { _selectedConfiguration = value; }
    }

    Task Connect() => MqttService.ConnectAsync(
        selectedConfiguration.ClientId, 
        selectedConfiguration.Host, 
        selectedConfiguration.Port, 
        selectedConfiguration.Tls, 
        selectedConfiguration.Username, 
        selectedConfiguration.Password);

    Task Disconnect() => MqttService.DisconnectAsync();

    protected override async Task OnInitializedAsync() 
    {
        MqttState.StateChanged += (o,s) => base.InvokeAsync(StateHasChanged);
        configurations = await ConfigurationRepository.GetAll();
        selectedConfiguration = configurations.FirstOrDefault();
    }

    protected void ConfigurationChanged(ChangeEventArgs args) 
    {
        selectedConfiguration = this.configurations.FirstOrDefault(c => c.Id.ToString() == args.Value.ToString());
        this.StateHasChanged();
    } 
    
} 