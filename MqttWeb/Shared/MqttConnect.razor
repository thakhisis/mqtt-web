@inject MqttState MqttState
@inject MqttService MqttService
@using System.Linq.Expressions
@using MqttWeb.Data

<h3>Connect</h3>
<div class="form">
    @if (configurations != null)
    {
        <select class="form-control" @bind="@selectedConfiguration">
            @foreach (var c in configurations)
            {
                <option value="@c.Id">@c.Name (@c.Host)</option>
            }
        </select>
    }
</div>

@functions {
    IEnumerable<Services.MqttConfiguration> configurations;
    Services.MqttConfiguration _selectedConfiguration;
    Services.MqttConfiguration selectedConfiguration
    {
        get { return _selectedConfiguration; }
        set { _selectedConfiguration = value; }
    }

    async Task Connect() {
        await MqttService.ConnectAsync(selectedConfiguration.ClientId, selectedConfiguration.Host, selectedConfiguration.Port, selectedConfiguration.Tls, selectedConfiguration.Username, selectedConfiguration.Password);
    }

    Task Disconnect() => MqttService.DisconnectAsync();

    protected override async Task OnInitializedAsync() 
    {
        MqttState.StateChanged += (o,s) => base.InvokeAsync(StateHasChanged);
        configurations = await MqttService.GetConfigurations();
    }

} 