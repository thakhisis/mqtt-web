@inject MqttState MqttState
@inject MqttService MqttService
@inject MqttConfigurationRepository ConfigurationRepository
@using System.Linq.Expressions
@using MqttWeb.Data

@if (configurations != null)
{
    <select @onchange="@ConfigurationChanged" class="form-control" disabled="@(MqttState.IsConnected)">
        @foreach (var conf in configurations)
        {
            <option value="@conf.Id">@conf.Name</option>
        }
    </select>
}
@if (MqttState.IsConnected)
{
    <button class="btn btn-primary form-control" @onclick="Disconnect">Disconnect</button>
}
else
{
    <button class="btn btn-primary form-control" @onclick="Connect">Connect</button>
}

@functions {
    IEnumerable<MqttConfiguration> configurations;
    MqttConfiguration _selectedConfiguration;
    MqttConfiguration selectedConfiguration
    {
        get { return _selectedConfiguration; }
        set { _selectedConfiguration = value; }
    }

    Task Connect() => MqttService.ConnectAsync(
        selectedConfiguration.ClientId, 
        selectedConfiguration.Host, 
        selectedConfiguration.Port, 
        selectedConfiguration.Tls, 
        selectedConfiguration.Username, 
        selectedConfiguration.Password);

    Task Disconnect() => MqttService.DisconnectAsync();

    protected override async Task OnInitializedAsync() 
    {
        MqttState.StateChanged += (o,s) => base.InvokeAsync(StateHasChanged);
        configurations = await ConfigurationRepository.GetAll();
        selectedConfiguration = configurations.FirstOrDefault();
    }
    
    protected async void ConfigurationChanged(UIChangeEventArgs configurationChangedEventArgs)
    {
        selectedConfiguration = this.configurations.FirstOrDefault(c => c.Id.ToString() == configurationChangedEventArgs.Value.ToString());
        this.StateHasChanged();
    }

} 