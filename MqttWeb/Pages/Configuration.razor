@page "/configuration"
@inject MqttState MqttState
@inject MqttService MqttService

    <div class="form">
        @if (configurations != null)
        {
            <label />
            <select @onchange="@ConfigurationChanged" class="form-control">
                <option selected="selected">--- Configurations ---</option>
                @foreach (var conf in configurations)
                {
                    <option value="@conf.Id">@conf.Name</option>
                }
                <option value>New...</option>
            </select>
        }

        <label>Client Id</label><input class="form-control" @bind-value="@selectedConfiguration.ClientId" @bind-value:event="oninput" />
        <label>Host</label><input class="form-control" @bind-value="@selectedConfiguration.Host" @bind-value:event="oninput" />
        <label>Port</label><input class="form-control" @bind-value="@selectedConfiguration.Port" @bind-value:event="oninput" />
        <label>Username</label><input class="form-control" @bind-value="@selectedConfiguration.Username" @bind-value:event="oninput" />
        <label>Password</label><input class="form-control" type="password" @bind-value="@selectedConfiguration.Password" @bind-value:event="oninput" />

        @if (selectedConfiguration?.Id == null)
        {
            <label></label><button class="btn btn-primary" @onclick="CreateConfiguration">Add</button>
        }
        else
        {
            <label></label><button class="btn btn-primary" @onclick="UpdateConfiguration">Update</button>
            <label></label><button class="btn btn-secondary" @onclick="DeleteConfiguration">Remove</button>
        }

        <label></label><button class="btn btn-secondary" @onclick="TestConfiguration">Test</button>


        <div>Host: <span>@(selectedConfiguration != null ? selectedConfiguration?.Host : "")</span></div>
        <div>Debug: <span>@debug</span></div>
        @*<div>Random: <span>@selectedId</span></div>
        <div>Is new: <span>@(selectedId == Guid.Empty ? "Yes" : "No")</span></div>*@
    </div>


@code {

    IEnumerable<Services.MqttConfiguration> configurations;
    //Guid? _selectedId { get; set; } = null;
    //Guid? selectedId { get { return _selectedId; } set { _selectedId = value; selectedConfiguration = value == null ? null : configurations.FirstOrDefault(c => c.Id == value) ?? new MqttConfiguration { Port = 1883, Tls = false, ClientId = Guid.NewGuid().ToString().Substring(0, 6) }; } }
    Services.MqttConfiguration selectedConfiguration = new MqttConfiguration();
    string debug { get; set; } = "debugs here:";

    protected override async Task OnInitializedAsync()
    {
        MqttState.StateChanged += (o, s) => base.InvokeAsync(StateHasChanged);
        configurations = await MqttService.GetConfigurations();
    }

    protected async void ConfigurationChanged(UIChangeEventArgs configurationChangedEventArgs)
    {
        selectedConfiguration = this.configurations.FirstOrDefault(c => c.Id.ToString() == configurationChangedEventArgs.Value.ToString()) ?? new MqttConfiguration();
        this.StateHasChanged();
    }

    async Task CreateConfiguration()
    {
        await MqttService.CreateConfiguration(selectedConfiguration);
    }

    async Task UpdateConfiguration()
    {
    }

    async Task DeleteConfiguration()
    {
    }

    async Task ConfigurationSelectionChanged()
    {
    }

    async Task TestConfiguration()
    {

    }


}