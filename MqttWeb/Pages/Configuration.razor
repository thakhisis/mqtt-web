@page "/configuration"
@inject MqttState MqttState
@inject MqttService MqttService
@inject MqttConfigurationRepository ConfigurationRepository

<style>
    .section > h3 {
        max-width: 430px;
        background-color: #DDDDE4;
        padding: 5px 15px;
        margin-left: -15px !important;
        position: relative;
    }

        .section > h3 > .header-icon {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 0.7em;
            color: #AAB;
        }
            
            .section > h3 > .header-icon:hover {
                cursor: pointer;
                color: #EFEFEF;
            }

    .section > .collapsible.isclosed {
        height: 0px;
        display: none;
    }
            
    .flex-outer {
        padding-left: 0px;
        max-width: 400px;
    }

    .flex-outer li,
    .flex-inner {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
    }

    .flex-outer > li > label,
    .flex-outer li p {
      flex: 1 0 120px;
      max-width: 160px;
    }
 
    .flex-outer > li > label + *,
    .flex-inner {
      flex: 1 0 160px;
    }

    .flex-outer > li > input:not([type='checkbox']),
    .flex-outer > li > textarea,
    .flex-outer > li > select,
    .flex-outer > li > button {
      padding: 5px;
      border: none;
      height: 34px;
      width: 100%;
    }

    .flex-outer > li > input:not([type='checkbox']) {
        padding-left: 10px;
    }
    
    .flex-outer > li:not(:last-child) {
      margin-bottom: 5px;
    }

</style>

<form>
    <div class="section">
        <h3>Connection settings</h3>
        <ul class="flex-outer">
            @if (configurations != null)
            {
                <li>
                    <label>Connection</label>
                    <select class="" @bind="@selectedConfigurationId">
                        @foreach (var conf in configurations)
                        {
                            <option value="@conf.Id">@conf.Name</option>
                        }
                        <option value="">New...</option>
                    </select>
                </li>
            }
            <li>
                <label for-name>Name</label>
                <input id="name" type="text" class="" @bind-value="@name" @bind-value:event="oninput" />
            </li>
            <li>
                <label for-host>Host</label>
                <input id="host" type="text" class="" @bind-value="@host" @bind-value:event="oninput" />
            </li>
            <li>
                <label for-port>Port</label>
                <input id="port" type="number" class="" @bind-value="@port" @bind-value:event="oninput" />
            </li>
            <li>
                <label for-clientId>Client Id</label>
                <input id="clientId" type="text" class="" @bind-value="@clientId" @bind-value:event="oninput" />
            </li>
            @if (!selectedConfigurationId.HasValue)
            {
                <li>
                    <label>&nbsp;</label>
                    <button class="btn btn-primary" @onclick="CreateConfiguration">Add</button>
                </li>
            }
            else
            {
                <li>
                    <label>&nbsp;</label>
                    <button class="btn btn-primary" @onclick="UpdateConfiguration">Update</button>
                </li>
            }
            <li>
                <label>&nbsp;</label>
                <button class="btn btn-secondary" @onclick="TestConfiguration">Test</button>
            </li>
            @if (selectedConfigurationId.HasValue)
            {
                <li>
                    <label>&nbsp;</label>
                    <button class="btn btn-secondary" @onclick="DeleteConfiguration">Remove</button>
                </li>
            }
        </ul>
    </div>
    <div class="section">
        <h3>General settings <span  @onclick="@(() => this.GeneralSettingsIsClosed = !this.GeneralSettingsIsClosed)" class="header-icon oi @ChevronClass(GeneralSettingsIsClosed)"></span></h3>
        <ul class="flex-outer collapsible @IsClosedClass(GeneralSettingsIsClosed)">
            <li>
                <label for-host>Host</label>
                <input id="host" type="text" class="" @bind-value="@host" @bind-value:event="oninput" />
            </li>
        </ul>
    </div>
    <div class="section">
        <h3>User credentials <span @onclick="@(() => this.UserCredentialsIsClosed = !this.UserCredentialsIsClosed)" class="header-icon oi @ChevronClass(UserCredentialsIsClosed)"></span></h3>
        <ul class="flex-outer collapsible @IsClosedClass(UserCredentialsIsClosed)">
            <li>
                <label for-username>Username</label>
                <input id="username" type="text" class="" @bind-value="@username" @bind-value:event="oninput" />
            </li>
            <li>
                <label for-password>Password</label>
                <input id="password" type="password" class="" @bind-value="@password" @bind-value:event="oninput" />
            </li>
        </ul>
    </div>
</form>

@functions {
    /* UI stuff */
    string IsClosedClass(bool isClosed) => isClosed ? "isclosed" : "";
    string ChevronClass(bool isClosed) => isClosed ? "oi-chevron-bottom" : "oi-chevron-top";
    bool GeneralSettingsIsClosed { get; set; } = false;
    bool UserCredentialsIsClosed { get; set; } = false;

    /* functionality stuff*/

    string name;
    string clientId;
    string host;
    int? port = 1883;
    bool? tls = false;
    string username;
    string password;

    string connectResult;

    IEnumerable<MqttConfiguration> configurations;
    Guid? _selectedConfigurationId;
    Guid? selectedConfigurationId
    {
        get => _selectedConfigurationId;
        set {
            _selectedConfigurationId = value;
            var conf = this.configurations.FirstOrDefault(c => c.Id == value);
            name = conf?.Name;
            clientId = conf?.ClientId;
            host = conf?.Host;
            port = conf?.Port;
            tls = conf?.Tls;
            username = conf?.Username;
            password = conf?.Password;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        MqttState.StateChanged += (o, s) => base.InvokeAsync(StateHasChanged);
        configurations = await ConfigurationRepository.GetAll();
        selectedConfigurationId = configurations.FirstOrDefault()?.Id;
    }

    async Task CreateConfiguration()
    {
        var newId = Guid.NewGuid();
        await ConfigurationRepository.Create(newId, name, clientId, host, port.Value, tls ?? false, username, password);
        configurations = await ConfigurationRepository.GetAll();
        selectedConfigurationId = newId;
    }

    async Task UpdateConfiguration()
    {
        if (!selectedConfigurationId.HasValue)
            return;

        await ConfigurationRepository.Update(selectedConfigurationId.Value, name, clientId, host, port ?? 1883, tls ?? false, username, password);
        configurations = await ConfigurationRepository.GetAll();
    }

    async Task DeleteConfiguration()
    {
        if (!selectedConfigurationId.HasValue)
            return;

        await ConfigurationRepository.Delete(selectedConfigurationId.Value);
        configurations = await ConfigurationRepository.GetAll();
        selectedConfigurationId = configurations.FirstOrDefault()?.Id ?? Guid.Empty;
    }

    async Task TestConfiguration()
    {
        this.connectResult = "Testing...";
        var result = await MqttService.ConnectAsync(clientId, host, port ?? 1883, tls ?? false, username, password);
        this.connectResult = result ? "Success" : "Failure";
        TimeoutHelper.SetTimeout(1500, () => {
            base.InvokeAsync(() => {
                this.connectResult = "";
                this.StateHasChanged();
            });
        });
    }
}