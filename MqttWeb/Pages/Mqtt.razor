@page "/mqtt"
@implements IDisposable
@inject MqttState MqttState
@inject MqttClient MqttClient
<h1>MQTT</h1>

<div><label>Host: <input @bind-value="@MqttState.Settings.Host" @bind-value:event="oninput" /></label></div>
<div><label>Port: <input @bind-value="@MqttState.Settings.Port" @bind-value:event="oninput" /></label></div>
<div><label>Username: <input @bind-value="@MqttState.Settings.Username" @bind-value:event="oninput" /></label></div>
<div><label>Password: <input type="password" @bind-value="@MqttState.Settings.Password" @bind-value:event="oninput" /></label></div>
<br/>
<div>
    <button class="btn btn-primary" @onclick="Connect" disabled="@MqttClient.IsConnected">Connect</button>
    <button class="btn btn-primary" @onclick="Disconnect" disabled="@(MqttClient.IsConnected == false)">Disconnect</button>
</div>
<hr />
@if (MqttClient.IsConnected)
{
    <MqttPublish />
    <MqttSubscribe />
}



<hr />
<h3>Debug</h3>
@foreach (var debug in debugs) {
    <div>@debug</div>
}

<span>@MqttState.Settings.Host</span>

@functions {

    List<string> debugs = new List<string>();
    List<string> messages = new List<string>();

    protected override void OnInit()
    {
        // Subscribe to the StateChanged EventHandler
        debugs.Add("Init'ed");

        MqttState.StateChanged += OnMqttStateAdvancedStateChanged;
    }

    void OnMqttStateAdvancedStateChanged(object sender, EventArgs e) {
        debugs.Add("state changed");
        base.Invoke(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        debugs.Add("Disposing");

        // When this control is disposed of
        // unsubscribe from the StateChanged EventHandler
        MqttState.StateChanged -= OnMqttStateAdvancedStateChanged;
    }

    async Task Connect() {
        debugs.Add("Connecting");
        await MqttClient.ConnectAsync("", "", 0, false, "", "");
    }

    async Task Disconnect() {
        debugs.Add("Disconnecting");
        await MqttClient.DisconnectAsync();
    }
}
 
